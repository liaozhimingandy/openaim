# =======================================
# 单文件工作流：构建 Vue3 应用 + 部署 GitHub Pages + 发布 Release
# =======================================
name: Build, Deploy & Release

on:
  push:
    branches:
      - main  # 当 main 分支有代码推送时触发

permissions:
  contents: write   # 允许创建 Release
  pages: write      # 允许部署到 GitHub Pages
  id-token: write   # 用于 pages 部署

jobs:
  # =============================
  # 1. 构建产物
  # =============================
  build:
    runs-on: ubuntu-latest
    steps:
      # 拉取代码
      - name: Checkout
        uses: actions/checkout@v4

      # 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*' # 使用 Node LTS 版本（推荐稳定）
          cache: npm            # 缓存 npm 依赖

      # 安装依赖
      - name: Install dependencies
        run: npm ci

      # 编译项目
      - name: Build project
        run: |
          npm run build
          # 为 GitHub Pages SPA 提供 404.html，避免路由刷新 404 问题
          cp dist/index.html dist/404.html

      # 将编译产物上传到 GitHub（artifact）
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-html  # artifact 名称
          path: dist        # artifact 内容（dist 目录）

  # =============================
  # 2. 部署到 GitHub Pages
  # =============================
  deploy:
    needs: build        # 依赖构建完成
    if: ${{ needs.build.result == 'success' }}   # 明确要求 build 成功才执行
    runs-on: ubuntu-latest
    steps:
      # 下载上一个工作流上传的 artifact（dist）
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-html  # 对应工作流 1 中的 artifact 名称
          path: dist        # 下载到 dist 目录

      # 将 dist 部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

  # =============================
  # 3. 发布 Release
  # =============================
  release:
    needs: build
    if: ${{ needs.build.result == 'success' }}   # 明确要求 build 成功才执行
    runs-on: ubuntu-latest
    steps:
      # 下载工作流 1 上传的 artifact
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-html  # 必须与工作流 1 上传时的 artifact 名称一致
          path: dist        # 下载到本地 dist 目录

      # 压缩构建产物为 ZIP
      - name: Archive build files
        run: zip -r build.zip dist

      # 生成标签：release-日期时间-短SHA (8位)
      - name: Generate tag name
        id: vars
        run: |
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-8)
          TAG_NAME="release-$(date +'%Y%m%d-%H%M%S')-${SHORT_SHA}"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV

      # docker 构建

      # 创建 Release 并上传构建产物
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.SHORT_SHA }}   # 使用当前推送的 tag
          name: "Release ${{ env.SHORT_SHA }}"
          files: build.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


